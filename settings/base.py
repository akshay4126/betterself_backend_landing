"""
Django settings for betterself_backend project.

Generated by 'django-admin startproject' using Django 2.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import sys
import logging

import dotenv
from corsheaders.defaults import default_headers
from django.core.exceptions import ImproperlyConfigured


def str2bool(v):
    return isinstance(v, str) and v.lower() in ('yes', 'true', 't', '1')


def from_env(name, default=''):
    var = os.environ.get(name, default)
    if not var:
        raise ImproperlyConfigured(f'{name} is not defined in the .env file')
    return var


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
dotenv.load_dotenv(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '1+s$nf(9z65qvddnomai6y6r^vxhqt*!3bhb9-yum6vk+4pnth'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# CORS settings
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = default_headers + (
    'cache-control',
    'api-key',
    'pragma'
)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django_celery_results',
    'django_filters',
    'rest_framework',
    'rest_framework_swagger',
    'corsheaders',
    'ckeditor',
    'ckeditor_uploader',

    'common',
    'user',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'corsheaders.middleware.CorsMiddleware',

    'common.middleware.DisableCSRF',
]

ROOT_URLCONF = 'betterself_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'betterself_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': from_env('POSTGRESQL_HOST'),
        'PORT': from_env('POSTGRESQL_PORT', '5432'),
        'NAME': from_env('POSTGRESQL_NAME'),
        'USER': from_env('POSTGRESQL_USER'),
        'PASSWORD': from_env('POSTGRESQL_PASSWORD'),
    }
}

# Celery
RABBITMQ_USER = from_env('RABBITMQ_USER')
RABBITMQ_PASSWORD = from_env('RABBITMQ_PASSWORD')
CELERY_RESULT_BACKEND = 'django-db'
CELERY_BROKER_URL = f'amqp://{RABBITMQ_USER}:{RABBITMQ_PASSWORD}@localhost:5672/%2f'

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'user.User'


REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    )
}

LOGIN_URL = 'rest_framework:login'  # for Swagger
LOGOUT_URL = 'rest_framework:logout'  # for Swagger

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static_backend/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static_backend'),
)

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
FILE_UPLOAD_PERMISSIONS = 0o644

CKEDITOR_BASEPATH = f'{STATIC_URL}ckeditor/ckeditor/'
CKEDITOR_UPLOAD_PATH = 'ckeditor_uploads/'
CKEDITOR_CONFIGS = {
    'default':
        {
            'skin': 'moono-lisa',
            'toolbar_Basic': [
                ['Source', '-', 'Bold', 'Italic']
            ],
            'toolbar_Full': [
                ['Styles', 'Format', 'Bold', 'Italic', 'Underline', 'Strike', 'SpellChecker'],
                ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent'],
                ['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],
                ['Link', 'Unlink', 'Anchor'],
                ['Image', 'Flash', 'Table', 'HorizontalRule'],
                ['TextColor', 'BGColor'],
                ['Smiley', 'SpecialChar'],
                ['Source'],
            ],
            'toolbar': 'Full',
            'height': 400,
            'width': 1000,
            'filebrowserWindowWidth': 940,
            'filebrowserWindowHeight': 725,
        }
}

# Email settings
EMAIL_USE_TLS = True
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = from_env('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = from_env('EMAIL_PORT', '587')
EMAIL_HOST_USER = from_env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = from_env('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
ADMIN_EMAIL = from_env('ADMIN_EMAIL')


if 'test' in sys.argv:
    from .test import *

try:
    from .local import *
except ImportError:
    pass


LOG_LEVEL = logging.ERROR
if DEBUG:
    LOG_LEVEL = logging.INFO

logging.basicConfig(level=LOG_LEVEL)
